@model POSSystemWithInventory.Models.SalesInvoiceVM
@{
    ViewData["Title"] = "Sales Invoice";
    Layout = "~/Views/Shared/_POSLayout.cshtml";
}

<style>

    #salesInvoiceTable tbody, tr:nth-child(2n+1) {
        background-color: #ccffcc;
    }

    #salesInvoiceTable tbody, tr:nth-child(2n+2) {
        background-color: #e6ccff;
    }

    .rightAlign {
        text-align: right;
    }

    .redColor {
        border-color: red;
    }
</style>

<div class="row">
    <div class="col-md-12">
        <form id="salesInvoiceCreateForm" enctype="multipart/form-data">
            <div class="card">
                <div id="headingOne" class="card-header bg-blue1">
                    <button type="button" data-toggle="collapse" data-target="#Collapse" aria-expanded="true" class="text-left m-0 p-0 btn btn-block" style="box-shadow: none;">
                        <h5 class="m-0 p-0" style="color: #fff;">Add Sales</h5>
                    </button>
                </div>
                <div class="card-body">
                    <div id="Collapse" class="collapse show">
                        <h3 style="text-align:center;">Invoice No.# <span id="invoiceNumber"></span></h3>
                        <h5 style="text-align:center;">Date: @DateTime.Now.ToString("dd MMM yyyy")</h5>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label asp-for="CustomerId" class="control-label">Customer Name</label>
                                    <select asp-for="CustomerId" asp-items="@Model.CustomerItem" class="form-control select2">
                                        
                                    </select>
                                    <span asp-validation-for="CustomerId" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label asp-for="SalesInvoiceDetail.ProductId" class="control-label">Product Name</label>
                                    <select asp-for="SalesInvoiceDetail.ProductId" asp-items="@Model.ProductItem" class="form-control select2">
                                        
                                    </select>
                                    <span asp-validation-for="SalesInvoiceDetail.ProductId" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group" style="margin-top: 22px;">
                                    <button type="button" id="salesInvoiceAddBtn" class="btn btn-success btn-sm">Add</button>
                                </div>
                            </div>
                        </div>
                        <div class="row table-responsive">
                            <table class="table table-bordered table-hover" id="salesInvoiceTable">
                                <thead>
                                    <tr style="background-color: #9999ff; font-weight:900; color:black; text-align:center;">
                                        <th>Name</th>
                                        <th>Quantity</th>
                                        <th>Unit Price</th>
                                        <th>Price</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="salesInvoiceTBody">
                                </tbody>
                                <tfoot>
                                    <tr style="background-color: #9999ff;font-weight: 900;color: black;">
                                        <td colspan="3" align="right">Sub total</td>
                                        <td id="subTotal" align="right"></td>
                                        <td></td>
                                    </tr>
                                    <tr style="font-weight: 900;color: black;">
                                        <td colspan="3" align="right">Discount</td>
                                        <td id="discount">
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                </div>
                                                <input type="number" class="form-control rightAlign" id="discountAmount" >
                                                <div class="input-group-append">
                                                    <span class="input-group-text"><b>%</b></span>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <select class="form-control" asp-for="VatAndTaxId" asp-items="@Model.VatItem"></select>
                                        </td>
                                    </tr>
                                    <tr style="font-weight: 900;color: black;">
                                        <td colspan="3" align="right">Grand total</td>
                                        <td id="grandTotal" align="right"></td>
                                        <td align="center">
                                            <input type="checkbox" id="bonusPoint"> Use Bonus Point
                                        </td>
                                    </tr>
                                    <tr style="font-weight: 900;color: black;">
                                        <td colspan="3" align="right">Paid Amount</td>
                                        <td><input type="number" class="form-control rightAlign" id="paidAmount" /></td>
                                        <td>
                                            <select class="form-control" id="paymentMode">
                                                <option value="Cash">Cash</option>
                                                <option value="Card">Card</option>
                                                <option value="Mobile Banking">Mobile Banking</option>
                                            </select>
                                        </td>
                                    </tr>
                                    <tr style="font-weight: 900; color: black;">
                                        <td colspan="3" align="right">Dues</td>
                                        <td id="dues" align="right"></td>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary pull-right" id="salesInvoiceResetBtn">Reset</button>
                    <button type="button" id="salesInvoiceCreateBtn" class="btn btn-primary">Save</button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts{ 
<script>

    (function () {
        let ajaxOperation = new AjaxOperation();
        let selector = {
            invoiceNumber: $("#invoiceNumber"),
            customerId: $("#CustomerId"),
            salesInvoiceResetBtn: $("#salesInvoiceResetBtn"),
            salesInvoiceCreateBtn: $("#salesInvoiceCreateBtn"),
            salesInvoiceResetBtn: $("#salesInvoiceResetBtn"),
            salesInvoiceAddBtn: $("#salesInvoiceAddBtn"),
            productId: $("#SalesInvoiceDetail_ProductId"),
            salesInvoiceTBody: $("#salesInvoiceTBody"),
            subTotal: $("#subTotal"),
            discountAmount: $("#discountAmount"),
            vatAndTaxId: $("#VatAndTaxId"),
            grandTotal: $("#grandTotal"),
            paidAmount: $("#paidAmount"),
            dues: $("#dues"),
            paymentMode: $("#paymentMode"),
            bonusPoint: $("#bonusPoint"),


            productInfo: ".productInfo",
            decrementQuantity: ".decrementQuantity",
            quantityInfo: ".quantityInfo",
            incrementQuantity: ".incrementQuantity",
            unitPriceInfo: ".unitPriceInfo",
            priceInfo: ".priceInfo",
            deleteRow: ".deleteRow",



            productStorage: [],
            inventoryStorage: [],
            bonusPointStorage: [],
            serialNumber: 1,
            rowId : 1,
        };

        class OnloadProcess{
            constructor() { }
            GetInvoiceNumber() {
                let invoiceNumber = ajaxOperation.GetAjax("SalesInvoice/GetInvoiceNumber/");
                selector.invoiceNumber.text(invoiceNumber);
            }
            GetAvailableQuantity() {
                selector.inventoryStorage = ajaxOperation.GetAjax("SalesInvoice/GetInventory");
            }
            GetCustomerBonusPoint() {
                selector.bonusPointStorage = ajaxOperation.GetAjax("User/GetBonusPoint");
            }
        }
        class SalesInvoiceDetail {
            constructor(InvoiceNumber, ProductId, Quantity, UnitPrice, Price) {
                this.InvoiceNumber = InvoiceNumber;
                this.ProductId = ProductId;
                this.Quantity = Quantity;
                this.UnitPrice = UnitPrice;
                this.Price = Price;
            }
        }

        class Process{
            constructor() { }
            AddEntryColumn(productName, productId, quantity, unitPrice, price) {
                selector.productStorage.push(productId);

                let data = `<tr id = "rowId${selector.rowId}">
                            <td> <a class="productInfo" productId="${productId}" serialNumber="${selector.serialNumber}">${productName}</a> </td>
                            
                            <td>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <button class="btn btn-danger btn-sm decrementQuantity" tittle = "Decrement" productId="${productId}" unitPrice = "${unitPrice}" serialNumber="${selector.serialNumber}" type="button"><i class="fa fa-minus-circle"></i></button>
                                    </div>
                                    <input type="number" class="form-control quantityInfo" style = "text-align: center;" unitPrice = "${unitPrice}" productId="${productId}" serialNumber="${selector.serialNumber}" value="${quantity}">
                                    <div class="input-group-append">
                                        <button class="btn btn-success btn-sm incrementQuantity" tittle = "Increment" productId="${productId}" unitPrice = "${unitPrice}" serialNumber="${selector.serialNumber}" type="button"><i class="fa fa-plus-circle"></i></button>
                                    </div>
                                </div>
                            </td>

                            <td>
                                <div class="input-group">
                                    <input type="text" class="form-control unitPriceInfo rightAlign" style = "border:none;" serialNumber="${selector.serialNumber}" value="${unitPrice}" readonly>
                                </div>
                            </td>
                            <td>
                                <div class="input-group">
                                    <input type="text" class="form-control priceInfo rightAlign" style = "border:none;" serialNumber="${selector.serialNumber}" value="${price}" readonly>
                                </div>
                            </td>
                            <td>
                                <div class="input-group" style = "align:center;">
                                    <button class="btn btn-danger btn-sm deleteRow" rowId="rowId${selector.rowId}" serialNumber="${selector.serialNumber}"><i class="fa fa-trash-alt"></i></button>
                                </div>
                            </td>
                    </tr>`;
                selector.serialNumber++;
                selector.rowId++;
                return data;
            }
            InventorySearch(inventoryStorage, productId) {
                let index = inventoryStorage.findIndex(item => item.productId === Number(productId));
                return inventoryStorage[index];
            }
            ProductSearch(productStorage, productId) {
                let index = productStorage.findIndex(item => item === productId);
                return index === -1 ? false : true;
            }
            CalculateSum(className) {
                let value = 0;
                $(className).each(function () {
                    value += Number($(this).val());
                });
                return value;
            }
            VatAndTax() {
                let text = selector.vatAndTaxId.children("option").filter(":selected").text();
                let vat = text.split("|");
                return Number(vat[1]);
            }
            CalculateDiscount(price, discount) {
                let decrement = (price / 100) * discount;
                return (price - decrement);
            }
            CalculateVat(price, vatAndTax) {
                let addingVat = (price / 100) * vatAndTax;
                return (price + addingVat);
            }
            MultipleTask() {
                let priceInfo = this.CalculateSum(selector.priceInfo);
                let discountAmount = selector.discountAmount.val() === "" ? 0 : selector.discountAmount.val();
                let vatAndTax = this.VatAndTax();
                let afterDiscount = this.CalculateDiscount(priceInfo, discountAmount);
                let afterAddingVat = this.CalculateVat(afterDiscount, vatAndTax);
                selector.subTotal.text(priceInfo.toFixed(2));
                selector.grandTotal.text(afterAddingVat.toFixed(2));
                selector.paidAmount.val(afterAddingVat.toFixed(2));
                selector.dues.text(0);
            }
            SetValue(className, serialNumber, value) {
                $(className).each(function () {
                    if ($(this).attr("serialNumber") === serialNumber)
                        $(this).val(value);
                });
            }
            GetCurrentValue(className, serialNumber) {
                let value;
                $(className).each(function () {
                    if ($(this).attr("serialNumber") === serialNumber)
                        value = $(this).val();
                });
                return value;
            }
            GetAvailableQuantity(inventoryStorage, productId) {
                let index = inventoryStorage.findIndex(item => item.productId === Number(productId));
                return inventoryStorage[index];
            }
            DecrementQuantity(quantity, productId, serialNumber, unitPrice) {
                let price = quantity * unitPrice;
                this.SetValue(selector.priceInfo, serialNumber, price.toFixed(2));
                this.MultipleTask();
            }
            IncrementQuantity(quantity, productId, serialNumber, unitPrice) {
                let price = quantity * unitPrice;
                this.SetValue(selector.priceInfo, serialNumber, price.toFixed(2));
                this.MultipleTask();
            }
            DeleteRow(deleteId) {
                let selfThis = this;
                let htmlData = "";
                selector.productStorage = [];
                $("#salesInvoiceTBody tr").each(function (i, row) {
                    let rowId = row.id;
                    let productName = $(this).find("td .productInfo").text();
                    let productId = $(this).find("td .productInfo").attr("productId");
                    let quantityInfo = $(this).find("td .quantityInfo").val();
                    let unitPrice = $(this).find("td .unitPriceInfo").val();
                    let price = $(this).find("td .priceInfo").val();
                    if (rowId != deleteId) {
                        htmlData += selfThis.AddEntryColumn(productName, productId, quantityInfo, unitPrice, price);
                    }
                    
                });
                selector.salesInvoiceTBody.html(htmlData);
                selfThis.MultipleTask();
            }
            IterateOverRow() {
                let salesInvoiceList = [];
                $("#salesInvoiceTBody tr").each(function (i, row) {
                    let invoiceNumber = selector.invoiceNumber.text();
                    let productName = $(this).find("td .productInfo").text();
                    let productId = $(this).find("td .productInfo").attr("productId");
                    let quantityInfo = $(this).find("td .quantityInfo").val();
                    let unitPrice = $(this).find("td .unitPriceInfo").val();
                    let price = $(this).find("td .priceInfo").val();
                    let obj = new SalesInvoiceDetail(invoiceNumber, productId, quantityInfo, unitPrice, price);
                    salesInvoiceList.push(obj);
                });
                return salesInvoiceList;
            }
            MakeJsonData() {
                let jsonData = {
                    InvoiceNumber: selector.invoiceNumber.text(),
                    CustomerId: selector.customerId.val(),
                    SubTotal: selector.subTotal.text(),
                    Discount: selector.discountAmount.val(),
                    GrandTotal: selector.grandTotal.text(),
                    PaidAmount: selector.paidAmount.val(),
                    Dues: selector.dues.text(),
                    PaymentMode: selector.paymentMode.val(),
                    VatAndTaxId: selector.vatAndTaxId.val(),
                    IsBonusPointTaken: selector.bonusPoint.is(":checked") ? true : false,
                    SalesInvoiceDetails: this.IterateOverRow(),
                }
                return jsonData;
            }
            ResetAll() {
                selector.salesInvoiceTBody.html("");
                $(".form-control").val('');
                selector.subTotal.text("");
                selector.grandTotal.text("");
                selector.productStorage = [];
                
            }
            BonusPoint() {
                let customerId = selector.customerId.val();
                let item = selector.bonusPointStorage.find(x => x.id === Number(customerId));
                return item.bonusPoint;
            }
        }
        let onloadProcess = new OnloadProcess();
        let process = new Process();
        window.onload = function () {
            onloadProcess.GetInvoiceNumber();
            onloadProcess.GetAvailableQuantity();
            onloadProcess.GetCustomerBonusPoint();
        }

        selector.salesInvoiceAddBtn.click(function () {
            let productId = selector.productId.val();
            let productName = $("#SalesInvoiceDetail_ProductId option:selected").text();
            if (productId != "") {

                let productInfo = process.InventorySearch(selector.inventoryStorage, productId);
                if (productInfo.availableQuantity > 0 && productInfo != null) {
                    if (selector.productStorage.length === 0) {
                        let data = process.AddEntryColumn(productName, productId, 1, productInfo.sellPrice.toFixed(2), productInfo.sellPrice.toFixed(2));
                        selector.salesInvoiceTBody.append(data);
                        process.MultipleTask();
                    }
                    else if (process.ProductSearch(selector.productStorage, productId) === false) {
                        let data = process.AddEntryColumn(productName, productId, 1, productInfo.sellPrice.toFixed(2), productInfo.sellPrice.toFixed(2));
                        let rowCount = selector.salesInvoiceTBody.find("tr").length;
                        rowCount > 0 ? $("#salesInvoiceTBody tr:first").before(data) : selector.salesInvoiceTBody.append(data);
                        process.MultipleTask();
                    }
                    else {
                        toastr.error("Already Taken!", "Error");
                    }
                    
                }
                else {
                    toastr.error("Out of Stock!", "Error");
                }
            }
            else {
                toastr.error("Select a Product!", "Error");
            }
            
        });

        $(document).on("click", selector.decrementQuantity, function () {
            let productId = $(this).attr("productId");
            let serialNumber = $(this).attr("serialNumber");
            let unitPrice = $(this).attr("unitPrice");
            let quantity = process.GetCurrentValue(selector.quantityInfo, serialNumber);
            if (quantity > 1) {
                process.SetValue(selector.quantityInfo, serialNumber, quantity - 1);
                process.DecrementQuantity(quantity - 1, productId, serialNumber, unitPrice);
            }
            else {
                toastr.error("Quantity is underflow!", "Error");
            }
        });

        $(document).on("click", selector.incrementQuantity, function () {
            let productId = $(this).attr("productId");
            let serialNumber = $(this).attr("serialNumber");
            let unitPrice = $(this).attr("unitPrice");
            let quantity = process.GetCurrentValue(selector.quantityInfo, serialNumber);
            let availableQuantity = process.GetAvailableQuantity(selector.inventoryStorage, productId);
            if (quantity < availableQuantity.availableQuantity) {
                process.SetValue(selector.quantityInfo, serialNumber, Number(quantity) + 1);
                process.IncrementQuantity(Number(quantity)+ 1, productId, serialNumber, unitPrice);
            }
            else {
                toastr.error("Quantity is Overflow!", "Error");
            }
        });

        $(document).on("change", selector.quantityInfo, function () {
            let quantity = Number($(this).val());
            if (quantity < 1) {
                $(this).val(1);
                process.MultipleTask();
            }
            else {
                let productId = $(this).attr("productId");
                let serialNumber = $(this).attr("serialNumber");
                let unitPrice = $(this).attr("unitPrice");
                let availableQuantity = process.GetAvailableQuantity(selector.inventoryStorage, productId);
                if (Number(quantity) <= Number(availableQuantity.availableQuantity)) {
                    process.SetValue(selector.priceInfo, serialNumber, unitPrice * quantity);
                    process.MultipleTask();
                }
                else {
                    $(this).val(1);
                    process.MultipleTask();
                    toastr.error("Quantity is Overflow!", "Error");
                }
            }
        });

        $(document).on("click", selector.deleteRow, function () {
            let rowId = $(this).attr("rowId");
            let htmlData = process.DeleteRow(rowId);
        });

        selector.discountAmount.keyup(function () {
            process.MultipleTask();
        });
        selector.vatAndTaxId.change(function () {
            process.MultipleTask();
        });

        selector.paidAmount.keyup(function () {
            let paidAmount = Number($(this).val());
            let grandTotal = Number(selector.grandTotal.text());
            if (paidAmount <= grandTotal) {
                selector.dues.text((grandTotal - paidAmount).toFixed(2));
            }
            else {
                process.MultipleTask();
                toastr.error("Invalid Paid Amount!", "Error");
            }

        });

        selector.salesInvoiceCreateBtn.click(function () {
            if (selector.salesInvoiceTBody.find("tr").length > 0) {
                let jsonData = process.MakeJsonData();
                let response = ajaxOperation.SavePostAjax("/SalesInvoice/Index", jsonData);
                if (response) {
                    toastr.success("Successfully Saved!", "Success");
                    onloadProcess.GetInvoiceNumber();
                    onloadProcess.GetAvailableQuantity();
                    process.ResetAll();
                }
                else {
                    toastr.error("Something went wrong!", "Error");
                }
            }
            else {
                toastr.error("No Invoice Found", "Error");
            }
            
        });

        selector.salesInvoiceResetBtn.click(function () {
            process.ResetAll();
        })

        selector.bonusPoint.change(function () {
            if ($(this).is(":checked")) {
                let bonusPoint = process.BonusPoint();
                let grandTotal = (selector.grandTotal.text() - bonusPoint).toFixed(2)
                selector.grandTotal.text(grandTotal);
                selector.paidAmount.val(grandTotal);
            }
            else {
                process.MultipleTask();
            }
        });

    })();
</script>
}