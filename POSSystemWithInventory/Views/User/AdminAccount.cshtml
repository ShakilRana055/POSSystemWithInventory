@model POSSystemWithInventory.Models.AdminAccountVM

@{
    ViewData["Title"] = "Admin Account";
    Layout = "~/Views/Shared/_POSLayout.cshtml";
}

<style>
    .odd {
        background-color: #b3ffff;
    }

    .even {
        background-color: #b3b3ff;
    }
</style>

<div class="row">
    <div class="col-md-6">
        <form id="adminAccountCreateForm" enctype="multipart/form-data">
            <div class="card">
                <div id="headingOne" class="card-header bg-blue1">
                    <button type="button" data-toggle="collapse" data-target="#Collapse" aria-expanded="true" class="text-left m-0 p-0 btn btn-block" style="box-shadow: none;">
                        <h5 class="m-0 p-0" style="color: #fff;">Add Admin Account</h5>
                    </button>
                </div>
                <div class="card-body">
                    <div id="Collapse" class="collapse show">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label asp-for="Name" class="control-label"></label>
                                    <input asp-for="Name" class="form-control" />
                                    <span asp-validation-for="Name" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="UserName" class="control-label"></label>
                                    <input asp-for="UserName" class="form-control" />
                                    <span asp-validation-for="UserName" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="Email" class="control-label"></label>
                                    <input asp-for="Email" class="form-control" />
                                    <span asp-validation-for="Email" autocomplete = "off" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="Password" class="control-label"></label>
                                    <input type="password" asp-for="Password" autocomplete = "off" class="form-control" />
                                    <span asp-validation-for="Password" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="ConfirmPassword" class="control-label">Confirm Password</label>
                                    <input type = "password" autocomplete = "off" asp-for="ConfirmPassword" class="form-control" />
                                    <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="Photo" class="control-label"></label>
                                    <input asp-for="Photo" style="border:none;" class="form-control" />
                                    <span asp-validation-for="Photo" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="adminAccountResetBtn">Reset</button>
                        <button type="button" id="adminAccountCreateBtn" class="btn btn-primary">Save</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div id="headingTwo" class="card-header bg-blue1">
                <button type="button" data-toggle="collapse" data-target="#tableDataToggle" aria-expanded="true" class="text-left m-0 p-0 btn btn-block" style="box-shadow: none;">
                    <h5 class="m-0 p-0" style="color: #fff;">Admin Account List</h5>
                </button>
            </div>
            <div class="card-body table-responsive" id="tableDataToggle">
                <table class="table table-hover table-bordered" id="adminAccountList">
                    <thead style="background-color: #ffd9b3;">
                        <tr>
                            <th>Name</th>
                            <th>Credential</th>
                            <th>Photo</th>
                            <th>Created Date</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script>
        (function () {
            let ajaxOperation = new AjaxOperation();
            let modalOperation = new ModalOperation();

            let selector = {
                name: $("#Name"),
                email: $("#Email"),
                userName: $("#UserName"),
                password: $("#Password"),
                photo: $("#Photo"),
                confirmPassword: $("#ConfirmPassword"),
                supplierCreateBtn: $("#adminAccountCreateBtn"),
                supplierCreateForm: $("#adminAccountCreateForm"),
                supplierList: $("#adminAccountList"),
                supplierResetBtn: $("#adminAccountResetBtn"),
                tableInformation: '',
                globalId: '',
            };
            let validator = selector.supplierCreateForm.validate({
                // Specify validation rules
                rules: {
                    Name: {
                        required: true,
                    },
                    Email: {
                        required: true
                    },
                    Password: {
                        required: true,
                    },
                    ConfirmPassword: {
                        required: true
                    },
                    UserName: {
                        required: true
                    },
                    Photo: {
                        required: true
                    },
                },
                // Specify validation error messages
                messages: {
                    Name: "Name Field is required",
                    Email: "Email Field is required",
                    UserName: "User Name is required",
                    Password: "Password is required",
                    ConfirmPassword: "Confirm Password is required",
                    Photo: "Must include a Photo",
                },
                // Make sure the form is submitted to the destination defined
                // in the "action" attribute of the form when valid
                submitHandler: function (form) {

                }
            });

            function GenerateSupplierList() {
                var supplierList = selector.supplierList.dataTable({
                    "processing": true,
                    "serverSide": true,
                    "filter": true,
                    "pageLength": 10,
                    "autoWidth": false,
                    "lengthMenu": [[10, 50, 100, 150, 200, 500], [10, 50, 100, 150, 200, 500]],
                    "order": [[0, "desc"]],
                    "ajax": {
                        "url": "/User/AdminAccountList/",
                        "type": "POST",
                        "data": function (data) {

                        },
                        "complete": function (json) {

                        }
                    },
                    "columnDefs": [
                        { "className": "custome", "targets": [0, 1, 2, 3] },
                    ],
                    "columns": [
                        { "data": "name", "name": "name", "autowidth": true, "orderable": true },
                        {
                            "render": function(data, type, full, meta){
                                return `${full.userName} <br/> ${full.email}`;
                            }
                        },
                        {
                            "render": function(data, type, full, meta){
                                return `<img src = "${full.photoUrl}" alt = "None" height = "25" width = "25" />`;
                            }
                        },
                        { "data": "createdDate", "name": "createdDate", "autowidth": true, "orderable": true },
                        {
                            "render": function (data, type, full, meta) {
                                if(full.email !== "admin@gmail.com"){
                                return`
                                    <div class="btn-group">
                                        <i class="fa fa-ellipsis-h" title = 'Actions' style = 'cursor:pointer;' data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></i>
                                    <div class="dropdown-menu" >
                                        <button style="font-size: inherit;" class="dropdown-item btn-rx viewAdminAccountInformation" supplierId = "${full.id}" ><i class="fa fa-info-circle" aria-hidden="true"></i>View</button >
                                        <button style="font-size: inherit;" class="dropdown-item btn-rx editAdminAccountInformation" name = "${full.name}" email = "${full.email}" userName = "${full.userName}" createdDate = "${full.createdDate}" password = "${full.password}" adminAccountId = "${full.id}" ><i class="fa fa-check-circle" aria-hidden="true"></i>Edit</button >
                                        <button style="font-size: inherit;" class="dropdown-item btn-rx deleteAdminAccountInformation" adminAccountId = "${full.id}" > <i class="fa fa-times" aria-hidden="true"></i>Delete</button >
                                    </div>
                                    </div>`;
                                }
                                else
                                    return "";
                            }
                        },
                    ]
                });
                selector.tableInformation = supplierList;
            }

            function ShowEditInformation(name, email, userName, password, confirmPassword){
                selector.name.val(name);
                selector.email.val(email);
                selector.userName.val(userName);
                selector.password.val(password);
                selector.confirmPassword.val(confirmPassword);
            }

            function PasswordSame(password, confirmPassword) {
                return password === confirmPassword ? true : false;
            }
            function EmailExist(email) {
                let functionalAjaxOperation = new AjaxOperation();
                let data = functionalAjaxOperation.GetAjaxByValue("/User/AdminExist", email);
                return data;
            }
            selector.supplierCreateBtn.click(function () {

                let emailExist = EmailExist(selector.email.val());
                let passwordSame = PasswordSame(selector.password.val(), selector.confirmPassword.val());

                if ($(this).text() === "Save") {
                    if (selector.supplierCreateForm.valid() && emailExist && passwordSame)
                    {
                        let formData = new FormData(selector.supplierCreateForm[0]);
                        let photo = selector.photo.get(0);
                        formData.append('Photo', photo.files);

                        let data = ajaxOperation.SaveAjax("/User/AdminAccount", formData);
                        if (data === true) {
                            selector.tableInformation.fnFilter();
                            selector.supplierCreateForm[0].reset();
                            toastr.success('Successfully Saved!', 'success');
                        }
                        else {
                            toastr.error('Something went wrong!', 'error');
                        }
                    }
                    else if (emailExist === false) {
                        toastr.error("Email Already Exist!", 'Email Failed!');
                    }
                    else if (passwordSame === false) {
                        toastr.error("Password aren't Same.", 'Password Failed!');
                    }
                    else {
                        toastr.error('Please fill up the form with valid information.', 'Validation Failed!');
                    }
                }
                else {
                    if (selector.password.val() !== "" && selector.confirmPassword.val() !== "") {
                        let formData = new FormData(selector.supplierCreateForm[0]);
                        let photo = selector.photo.get(0);
                        formData.append('Photo', photo.files);
                        formData.append("Id", selector.globalId);
                        let data = ajaxOperation.SaveAjax("/User/AdminAccountUpdate", formData);
                        if (data === true) {
                            selector.tableInformation.fnFilter();
                            selector.supplierCreateForm[0].reset();
                            toastr.success('Successfully Updated!', 'success');
                            $(this).text("Save");
                            selector.email.removeAttr("readonly", true);
                        }
                        else {
                            toastr.error('Something went wrong!', 'error');
                        }
                    }
                    else if (emailExist === false) {
                        toastr.error("Email Already Exist!", 'Email Failed!');
                    }
                    else {
                        toastr.error("Password field Can't Empty", 'Password Error!');
                    }
                    
                }
            });

            window.onload = function () {
                GenerateSupplierList();
            }

            selector.supplierResetBtn.click(function () {
                selector.supplierCreateForm[0].reset();
            });

            $(document).on("click", ".editAdminAccountInformation", function () {
                selector.globalId = $(this).attr("adminAccountId");
                let name = $(this).attr("name");
                let email = $(this).attr("email");
                let userName = $(this).attr("userName");
                let password = $(this).attr("password");
                let confirmPassword = $(this).attr("password");
                selector.email.attr("readonly", true);

                ShowEditInformation(name, email, userName, password, confirmPassword);
                selector.supplierCreateBtn.text("Update");
            });

            $(document).on("click", ".deleteAdminAccountInformation", function () {
                let supplierId = $(this).attr("adminAccountId");
                Swal.fire({
                    title: 'Are You Sure?',
                    text: "",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes',
                    showConfirmButton: true,
                    allowEscapeKey: false,
                    allowOutsideClick: false,

                }).then((result) => {
                    if (result.value) {
                        let hasDone = ajaxOperation.DeleteAjaxById("/User/DeleteAdminAccount", supplierId);
                        if (hasDone === true) {
                            toastr.success('Successfully Deleted!', 'Success');
                            selector.tableInformation.fnFilter();
                        }
                        else {
                            toastr.error('Something went wrong', 'Error');
                        }
                    }
                });
            });

            $(document).on("click", ".viewAdminAccountInformation", function () {
                let supplierId = $(this).attr("adminAccountId");
                let htmlData = ajaxOperation.GetAjaxHtmlByValue("/User/AdminAccountInformation", supplierId);

                $("#modalHeading").text("Admin Account Information");
                modalOperation.ModalStatic("#informationModal");
                modalOperation.ModalOpenWithHtml("#informationModal", "#informationModalDiv", htmlData);
            });

        })();
    </script>
}

