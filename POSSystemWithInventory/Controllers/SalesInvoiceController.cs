using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using POSSystemWithInventory.ConstantAndHelpers;
using POSSystemWithInventory.EntityModel;
using POSSystemWithInventory.Models;
using POSSystemWithInventory.RepositoryPattern.Interfaces.IUnitOfWork;

namespace POSSystemWithInventory.Controllers
{
    public class SalesInvoiceController : Controller
    {
        private readonly IUnitOfWork context;

        public SalesInvoiceController(IUnitOfWork unitOfWork)
        {
            context = unitOfWork;
        }
        public IActionResult Index()
        {
            var customerItems = context.Customer.GetAll().ToList();
            var productItems = context.Product.GetAll().ToList();
            var vatItems = context.VatAndTax.GetAll().ToList();
            SalesInvoiceVM salesInvoice = new SalesInvoiceVM()
            {
                CustomerItem = POSHelper.Customer(customerItems),
                ProductItem = POSHelper.Product(productItems),
                VatItem = POSHelper.VatAndTax(vatItems),
            };
            
            return View(salesInvoice);
        }
        public IActionResult SalesInvoiceList()
        {
            return View();
        }

        [HttpPost]
        public IActionResult Index(SalesInvoiceVM salesInvoiceVM)
        {
            try
            {
                SalesInvoice salesInvoice = new SalesInvoice()
                {
                    InvoiceNumber = salesInvoiceVM.InvoiceNumber,
                    CustomerId = salesInvoiceVM.CustomerId,
                    SubTotal = salesInvoiceVM.SubTotal,
                    Discount = salesInvoiceVM.Discount,
                    GrandTotal = salesInvoiceVM.GrandTotal,
                    PaidAmount = salesInvoiceVM.PaidAmount,
                    Dues = salesInvoiceVM.Dues,
                    VatAndTaxId = salesInvoiceVM.VatAndTaxId,
                };
                context.SalesInvoice.Add(salesInvoice);
                context.Save();

                foreach (var item in salesInvoiceVM.SalesInvoiceDetails)
                {
                    SalesInvoiceDetail salesInvoiceDetail = new SalesInvoiceDetail()
                    {
                        InvoiceNumber = item.InvoiceNumber,
                        SalesInvoiceId = salesInvoice.Id,
                        ProductId = item.ProductId,
                        Quantity = item.Quantity,
                        UnitPrice = item.UnitPrice,
                    };
                    DecrementIneventory(item.ProductId, item.Quantity);
                    context.SalesInvoiceDetail.Add(salesInvoiceDetail);
                    context.Save();
                }
                
                return Json(true);
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
                throw ex;
            }
        }
        #region Actions and Helpers

        private void DecrementIneventory(int? productId, decimal quantity)
        {
            var inventory = context.Inventory.Find(item => item.ProductId == productId).FirstOrDefault();
            if(inventory != null)
            {
                inventory.AvailableQuantity -= quantity;
                inventory.UpdatedDate = DateTime.Now.ToShortDateString();
                context.Save();
            }
        }
        private string InvoiceNumber()
        {
            var lastSalesInvoice = context.SalesInvoice.GetLastOrDefault();
            string invoiceNumber = AutoGeneratedNumber.GetInvoiceNumber(lastSalesInvoice == null ? "1": lastSalesInvoice.InvoiceNumber);
            return invoiceNumber;
        }
        public IActionResult GetInvoiceNumber()
        {
            string invoiceNumber = InvoiceNumber();
            return Json(invoiceNumber);
        }
        public IActionResult GetInventory()
        {
            var inventory = context.Inventory.GetAllWithRelatedData().ToList();
            return Json(inventory);
        }
        #endregion
    }
}
